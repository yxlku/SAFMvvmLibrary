apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion AndroidApp.compileSdkVersion

    defaultConfig {
        minSdkVersion AndroidApp.minSdkVersion
        targetSdkVersion AndroidApp.targetSdkVersion
        versionCode AndroidApp.versionCode
        versionName AndroidApp.versionName

        //MultiDex分包方法
        multiDexEnabled true
        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildFeatures{
        dataBinding = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            aaptOptions {
                cruncherEnabled false
            }
        }
        /**
         * 建议提测用这个构建类型，并使用 BuildConfig.BUILD_TYPE 判断是否等于 beta，作为
         * 开启动态修改 Url，动态打开日志等功能的标记。
         */
        beta {
            initWith release
        }

    }
}

dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
    // 这两个是创建项目默认就有的库
    api Deps.kotlinStdLib
    api Deps.kotlinKTX
    // 兼容库
    api Deps.appcompat
    // 约束布局
    api Deps.constraintLayout
    // RecycylerView
    api Deps.recyclerView
    // material
    api Deps.material

    // 以下三个是为了使用最新的特性
    api Deps.activity
    api Deps.activityKTX
    api Deps.fragment

    // 在 Lifecycles 中使用协程，视图销毁则自动取消
    api Deps.lifecycleRuntimeKTX
    // 在 LiveData 中使用协程
    api Deps.lifecycleLiveDataKTX
    // 监控应用的生命周期
    api Deps.lifecycleProcess
    // 简化 Fragment 的 API 调用，同时通过 viewModels 扩展方法创建 vm 来的非常容易
    api Deps.fragmentKTX
    // 使用 Java8 替换 lifecycleCompiler，让 vm 可以感知 v 生命周期
    api Deps.lifecycleJava8

    // 内嵌的加载中库
    api Deps.MultiStatePage

    // 数据库
    api Deps.roomRuntime
    api Deps.roomKTX

    // 网络，默认使用 gson 解析 json
    api Deps.retrofit2
    api Deps.retrofit2KotlinCoroutinesAdapter
    api Deps.loggingInterceptor
    api Deps.gson
    api Deps.gsonConverter

    // 图片，使用 glide
    api Deps.glide

    // 权限申请
    api Deps.livePermissions

    //日志
    api Deps.logger

    //mmkv 性能比sp好，替代sp
    api Deps.mmkvStatic

    //事件总线
    api Deps.liveEventBus

    //通用弹窗
    api Deps.XPopupDialog
    api Deps.XPopupDialogExt //城市、时间选择

    //Adobe动画库
    api Deps.lottie

    // debug 阶段内存泄露检测
    debugImplementation Deps.leakCanary2
    // debug log弹窗
//    debugImplementation Deps.appLogcat


}